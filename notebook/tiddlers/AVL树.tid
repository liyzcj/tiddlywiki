created: 20200505103715516
modified: 20200505132932799
tags: 二叉搜索树
title: AVL树
type: text/vnd.tiddlywiki

在计算机科学中，''AVL 树''是最早被发明的自平衡二叉查找树。(发明者 ''A''delson-''V''elsky and ''L''andis)

在AVL树中，任一节点对应的两棵子树的最大高度差为 1，因此它也被称为''高度平衡树''。

> 查找、插入和删除在平均和最坏情况下的时间复杂度都是 $$O(\log{n})$$。

''增加和删除元素''的操作则可能需要借由一次或多次''树旋转''，以实现树的重新平衡。

> 作者在1962年的论文《An algorithm for the organization of information》中公开了这一数据结构。


!! 原理

AVL 树的每个节点都有一个''平衡因子''，''平衡因子''是左右两颗子树的''高度差''。带有平衡因子 $$1、0$$ 或 $$-1$$ 的节点被认为是平衡的。而带有平衡因子 $$-2$$ 或 $$2$$ 的节点被认为是不平衡的，并需要重新平衡这个树。

''平衡因子可以直接存储在每个节点中，或从可能存储在节点中的子树高度计算出来。''

实现自动平衡需要依靠一系列的''旋转操作''来完成，这些操作一共分为四种情况：

[img[https://s1.ax1x.com/2020/05/05/YkP0OO.png]]

其中，左左和右右只需要进行一次旋转，而左右和右左需要两次旋转。


!!! 删除操作

从AVL树中删除，可以''通过把要删除的节点向下旋转成一个叶子节点，接着直接移除这个叶子节点''来完成。因为在旋转成叶子节点期间最多有 $$logn$$ 个节点被旋转，而每次 AVL 旋转耗费固定的时间，所以删除处理在整体上耗费 $$O(log n)$$ 时间。

!!! 搜索

可以像普通二叉查找树一样的进行，所以耗费 $$O(log n)$$ 时间，因为 AVL 树''总是保持平衡的。''
