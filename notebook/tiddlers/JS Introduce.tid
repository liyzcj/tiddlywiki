created: 20200321094247606
modified: 20200321111631741
tags: 
title: JS Introduce
type: text/vnd.tiddlywiki

!! 什么是 JS

Javascript 是一个面向非编程人员的解释型脚本语言，是[[Web 页面三大元素]]之一，主要负责 HTML 页面的''交互行为''。

在初期，JS 主要作为客户端的脚本语言，在用户的浏览器上运行，不需要服务器的支持，可以减少服务器的负担。但是在客户端运行会面临着''安全性问题''。在服务器性能越来越强的现在，大家更喜欢在服务器上运行脚本以保证安全性。尽管如此，JS 仍然依赖强大的跨平台能力大行其道。

随着 Chrome V8 引擎以及基于它的 [[Nodejs]] 的发展，让 JS 也具有了一定的服务器功能。现在的 JS 不仅可以在浏览器中运行，它几乎可以在任何设备上运行。在设备上被用来解释运行 JS 代码的程序被称为 Javascript 引擎。拥有 JS 引擎的浏览器有时候被称为 JS 虚拟机。不同的引擎有着不同的代号：

* V8 --- Chrome 和 Opera
* "~SpiderMonkey" --- Firefox
* "Trident" "Chakra" --- IE,
* "~ChakraCore" --- Edge
* "Nitro" "~SquirrelFish" --- Safari

!! in-browser JS 可以做什么

JS 是一个比较安全的编程语言。因为它并不提供操作系统底层的接口，因为它本来就是为浏览器中的程序而创造的。

JS 的能力极大的依赖了它的运行环境。例如 [[Nodejs]] 框架允许 JS 读写文件，进行网络请求等等。

在浏览器中运行的 JS 可以做任何和页面有关的操作，并且可以与用户和 Web 服务器交互。例如：

* 增加新的 HTML 元素到页面中，或者修改已有的元素;
* 对用户的行为反馈，例如鼠标点击、移动，键盘的点击等;
* 对远程服务器发送请求，下载或者上传文件，即所谓的 [[AJAX]] 和 [[COMET]] 技术;
* 获取或设置 cookies，询问访问者或显示信息;
* 在客户端存储数据。

!! in-browser JS 不能做什么

为了用户的安全，JS 在浏览器中的能力被做了限制。这样可以防止恶意网站窃取用户的信息。

例如：

* ''无法读取硬盘上的文件''，或执行硬盘上的代码。JS 没有对 OS 函数的访问权限。<div>

<<info "高级的浏览器可以允许 JS 在用户做特定行为时访问系统中的部分文件，例如将一个文件拖到浏览器中这种操作。或者在 `input` 元素中选择一些文件。还有一些方法可以用来访问设备上的摄像头等，不过需要用户的授权。">>

</div>

* ''不同的 Tab 或着窗口之间无法通信''。这被称为 `Same Origin Policy` 要想打破这个规则，两个页面必须允许数据交换，并且包含特殊的 JS 代码。 <div>

<<info "同样的，这个限制也是为了用户的安全考虑。">>

</div>

* JS 可以轻松与当前页面的服务器进行通信，但是与其他网站中的页面交互是禁止的。尽管有可能，但是这需要服务端的明确同意（在 HTTP 头中表示）。<div>

<<info "这种限制同样是为了安全。但是对于不是在浏览器中运行的 JS 代码，是可以访问不同的服务的。">>

</div>


!! 独特性

Javascript 的独特主要体现在：

* HTML/CSS 的完全融合
* 简单直接的逻辑
* 被大部分主流浏览器支持

Javascript 是唯一一个能够满足这三个东西的浏览器技术。

!! 以 JS 为基础的语言

JS 的语法不能满足所有人的需求，不同的人有着不同的需求。因此，出现了许多新的语言，这些语言在浏览器运行之前被转译为 JS 语言。先进的转译工具让这个过程非常快速又透明，这样就可以允许''开发者使用另一种语言编写 JS 脚本。''

常用的语言如下：

* [[CoffeScript|http://coffeescript.org/]] 是一个 JS 的[[语法糖]]，它提供了一些简短的语法，让开发更加便捷。Ruby 程序员可能会喜欢这个版本。

* [[TypeScript|http://www.typescriptlang.org/]] 专注于增加''严格的数据类型''来简化系统的开发和支持。由微软开发

* [[Flow|http://flow.org/]] 同样增加了一些数据类型，又 Facebook 开发。

* [[Dart|https://www.dartlang.org/]] 是一个标准的编程语言，它有着自己的引擎和非浏览器的开发环境，但是它也可以为被转换为 JS 执行。由 Google 开发。

除了这些，还有很多。即使有这些需要翻译的方言，但是我们仍然要通过 JS 来知道这些代码最终干了什么。

!! 总结

* Js 最开始被创建用来作为专用于浏览器的语言，但是现在在很多环境中都可以运行。
* 今天，JS 处在一个非常独特的位置，他是浏览器中最广泛的语言，并与 HTML/CSS 完美结合。
* 有许多语言是被翻译为 JS 再将执行的。
