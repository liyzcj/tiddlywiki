created: 20200314161032004
modified: 20200404134249425
tags: [[Python others]]
title: Pypy 与 JIT
type: text/vnd.tiddlywiki

Python 是解释型语言，而不是编译型语言。

编译型语言就是直接将写完的整个程序编译为机器码，再进行执行。编译型语言的好处是快，因为编译成机器码以后没有一个多余的逻辑。坏处是因为逻辑是静态的，类型也是静态的，所以就难以支持许多动态特性。

而解释型语言是一句一句的执行。在运行到某一句的时候，解释器会对语言的逻辑进行解释并去执行相应的动作，好处是这样实现简单，也容易增加新特性。坏处则是运行非常慢，因为要花很多时间在解释器的运行上。

例如对于一个简单的 Python 函数：

```python
def add(a, b):
	return a + b
```

在运行时，解释器并不知道参数 a 和参数 b 是什么数据类型。只知道是 `a+b` 怎么加，什么类型，有没有 __add__方法，都不知道。只有在程序运行到这行代码的时候再说。

从另一个角度说，解释器要干什么呢？假想要想用静态语言例如 C++ 实现这个函数，需要大量的函数重载或者用模版，因为参数的类型是任意的。

Pypy 是使用 rPython 实现的解释器，rPython 是 Python 的子集。Pypy 解释器运行起来比 Cpython 解释器快的原因是采用了 JIT 技术。

JIT 编译 （Just In Time） 是一种介于编译型与解释型之间的东西，它首先会用解释器去解释运行代码，在收集了足够多的信息以后，例如在运行了 100 遍 `add(a, b)` 以后，发现 `a, b` 都是 int 类型，那么 JIT 就会直接将这个函数编译为机器码，下次再调用这个函数的时候，会直接调用机器码。这就是 JIT 比解释型语言快很多的原因。

Pypy 快的还有一个很大的原因是重写了 runtime，比如各种数据结构以及内存布局等等。这也就导致 pypy 在环境上与 Cpython 不兼容，很多 C-extension 没发通用。