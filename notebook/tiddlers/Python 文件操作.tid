caption: 基本文件操作
created: 20190719224352263
creator: liyzcj
modified: 20190828182907895
modifier: liyzcj
tags: Python
title: Python 文件操作
todo-done: 20190720181049
type: text/vnd.tiddlywiki

Python 通过 `open(filname, flag)` 函数打开一个文件, 返回一个文件对象, 并通过对象对文件进行操作.

* filename : 要打开的文件路径
* flag : 标志, 控制对文件的权限


标志包括: `a, w, r, b, t, +, x`

* `a` : 添加: 打开文件, 并将指针置于文件末尾
* `w` : 写入: 打开文件, 并将指针置于文件开头. 若文件不存在, 则创建文件.
* `r` : 读取, 打开文件, 将指针置于文件开头.
* `b` : 是否以二进制的方式读写.
* `t` : 是否以 `str` 的方式读写.
* `+` : 将权限提高为读写.
* `x` : 创建文件, 如果文件存在会抛出异常, 有写权限.

通常使用 `with ... as ...` 语法, 确保文件的自动关闭.

```python
with open(file_path, flags) as of:
	pass
```

> 默认 `flags == 'r'`

!! 读取方法

从文件中读取

* read() <div>

```python
with open('file_path') as if:
	of.read(size)
```

如果 `size` 参数未指定, 则返回整个文件. 💡 `size` 包含 `\n` 换行符.

</div>

* readline() <div>

```python
with open(file_path) as if:
	l = of.readline()
```

返回一行数据, 返回的数据包含 `\n` 换行符.

</div>

* readlines(size) <div>

```python
with open(file_path) as if:
	lines = if.readlines(size)
```

返回 `size` 之内的''所有行组成的列表''. 每个行包含 `\n`. 💡 `size` 指的是字符数, 且不包含 `\n`.

</div>

* 除了以上方法之外, 还可以将文件对象当作迭代器进行读取: <div>

```python
with open(file_path) as if:
	for l in if:
     ...
```
</div>

!! 写入方法

写入文件需要有写入权限:

```python
of = open(file_path, 'w')
```

主要写入方法有两种:

* of.write(content) <div>

```python
of.write(content)
```

其中, `content` 必须是字符串.

</div>

* of.writelines(content) <div>

与 `write` 类似, 不过 `content` 可以是字符串或着 List.

</div>

!! 其他方法与属性

!!! 方法

除了写入与读取文件, 还可以对文件指针进行操作.

; f.seek(offset, position=1)
: 移动文件指针.

* offset : 偏移量, 可以为正数或负数.

* position : 相对位置.
** `0` : 文件开头
** `1` : 当前位置
** `2` : 文件结尾

> 💡 只有以二进制方式打开文件时, 才可以使用负偏移量.

; f.tell()
: 返回当前指针相对于文件头的位置. 例如: 若已经读取 6 个字符, 则返回 7.

; f.close()
: 关闭文件

!!! 属性

* `f.mode` : 打开文件的标记.
   