caption: 唯一识别码 uuid
created: 20191209154747608
modified: 20200404141414648
tags: [[Python 内建 Modules]]
title: Python uuid
type: text/vnd.tiddlywiki

! uuid
---

Python uuid module provides immutable UUID objects and the functions `uuid1()`, `uuid3()`, `uuid4()`, `uuid5()` for generating version 1, 3, 4, and 5 UUIDs as specified in [[RFC 4122|https://tools.ietf.org/html/rfc4122.html]].

!! Unique ID

if need Unique ID, usually use `uuid1()` and `uuid4()`. 

* `uuid.uuid1(node=None, clock_seq=None)` : <div>

Generate a UUID from a ''host ID, sequence number and current time.'' 

if node is not given, `getnode()` is used to obtain hardware address. 

if clock_seq is given , it is used as sequence number, otherwise a random 14-bit squence number is chosen.

> This may compromise privacy since it uses computer hardware address.

</div>


* `uuid.uuid4()`: <div>

Generate a random UUID.

```python
>>> import uuid
>>> uuid.uuid4()
UUID('04f69114-83fe-4967-8a82-fb78f0c1514e')
```
> Note that this UUID possible duplication。

</div>


!! Key pair unique

if you want a unique name in namespace use `uuid3()` `uuid5()`, These two is similar, just has different algorithm.

* `uuid.uuid5(namespace, name)` : <div>

Generate a UUID based on the SHA-1 hash of a namespace identifier(which is a UUID) and a name(which) is a string.

```python
>>> import uuid
>>> uid = uuid.uuid4()
UUID('65d45e63-bb1a-4357-8931-738fb506d49a')
>>> uuid.uuid5(uid, 'foo')
UUID('c80a4e17-33c3-5187-8645-7c42418dc59a')
>>> uuid.uuid5(uid, 'foo')
UUID('c80a4e17-33c3-5187-8645-7c42418dc59a')
```

</div>

!! UUID attributes

Attributes in common usage:

* `bytes` : The UUID as a 16-byte string
* `hex` : The UUID as a 32-character hexadecimal string.
* `int` : The UUID as a 128-bit integer.