created: 20190825142343314
modified: 20200405074112831
tags: Markup Migrated
title: Yaml
type: text/vnd.tiddlywiki

! Yaml
---

YAML 是 YAML Ain't a Markup Language 的递归缩写。但它实际上还是一种标记语言。

YAML 的基本语法规则有如下四条：

* 大小写敏感
* 使用缩进代表层级关系
* 缩进时使用空格而不是 Tab 键
* 缩进的空格数目不重要，但是同层级要保持一致

YAML 支持三种数据结构：

* 对象：也就是字典，键值对
* 数组：按次序排列的值
* 纯量：单个不可分的值


!! 对象

键值对用冒号结构表示：

```yaml
animal: pets
```

YAML 也允许将所有键值对写成行内对象：


```yaml
hash: { name: Steve, foo: bar}
```

!! 数组

一组连词线开头的行，构成一个数组：


```yaml
- Cat
- Dog
- Goldfish
```

转换为 JS 如下：


```javascript
['Cat', 'Dog', 'Goldfish']
```

如果数组的子成员也是一个数组，则：

```yaml
-
	- Cat
	- Dog
	- Goldfish
```

转换为 JS 如下：

```javascript
[['Cat', 'Dog', 'Goldfish']]
```

数组也可以采用行内表示：

```yaml
animal: [cat, Dot]
```

转为 JS 如下：

```javascript
{animal: ['cat', 'Dog']}
```

!! 复合结构

对象和数组可以结合使用：

```yaml
languages:
 - Ruby
 - Perl
 - Python 
websites:
 YAML: yaml.org 
 Ruby: ruby-lang.org 
 Python: python.org 
 Perl: use.perl.org
```
转换后如下：

```javascript
{ languages: [ 'Ruby', 'Perl', 'Python' ],
  websites: 
   { YAML: 'yaml.org',
     Ruby: 'ruby-lang.org',
     Python: 'python.org',
     Perl: 'use.perl.org' } }
```

!! 纯量 

纯量是最基本的，不可再分的值。包括：

* 字符串
* 布尔值
* 整数
* 浮点数
* Null
* 时间
* 日期


数值可以直接填写：

```yaml
number: 1.45
number2: 12
```

布尔值和 Null：

```yaml
T: true
F: false
N: ~
```

时间和日期采用 ISO8601 格式：

```yaml
iso8601: 2001-12-14t21:59:43.10-05:00 
date: 1976-07-31
```

如果需要字符串，可以使用`!!str` 强制转换类型：

```yaml
a: !!str 123
b: !!str true
```

!!! 字符串

字符串有点复杂，正常的字符串可以直接写：

```yaml
str: 字符串
```

如果包含空格，则需要用 `'`：

```yaml
str: `a str`
```

双引号不会对特殊字符转义：

```yaml
str: "buhui \n zhuanyi"
```

如果字符串中有单引号，则需要两个单引号转义：

```yaml
str: 'Alex''s book'
```

字符串还可以写成多行， 从第二行开始必须有缩进，换行会被转为空格：

```yaml
str: 一个
	多行
	字符串
```

多行字符串可以使用 `|` 保留换行符，也可以使用 `>` 在最后添加一个换行符：

```yaml
this: |
  Foo
  Bar
that: >
  Foo
  Bar
```

转为 JS 如下：

```javascript
{ this: 'Foo\nBar\n', that: 'Foo Bar\n' }
```

可以在后面添加 `+` 或者 `-`, `+` 表示保留文末换行符， `-`表示删除文末换行符：

```yaml
- |-
  Foo
  Bar

- >+
  Foo
  Bar
	
```

分别为：

```javascript
[ 'Foo\nBar' ]
```

```javascript
[ 'Foo Bar\n' ]
```


!! 引用

锚点 `&` 和别名 `*` 用来进行引用：

```yaml
defaults: &defaults
  adapter:  postgres
  host:     localhost

development:
  database: myapp_development
  <<: *defaults

test:
  database: myapp_test
  <<: *defaults
```

与下面等效：

```yaml
defaults:
  adapter:  postgres
  host:     localhost

development:
  database: myapp_development
  adapter:  postgres
  host:     localhost

test:
  database: myapp_test
  adapter:  postgres
  host:     localhost
```
`&` 用来建立锚点，`<<` 表示合并到当前数据，`*` 用来引用锚点。

另一个例子：

```yaml
- &showell Steve 
- Clark 
- Brian 
- Oren 
- *showell 
```

结果：

```javascript
[ 'Steve', 'Clark', 'Brian', 'Oren', 'Steve' ]
```