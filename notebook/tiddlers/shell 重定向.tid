caption: 重定向 Redirection
created: 20190904073224214
modified: 20200619053624971
tags: ShellSyntax
title: shell 重定向
type: text/vnd.tiddlywiki

! 重定向

Linux 重定向分为两种，输入重定向和输出重定向。

重定向的意思是重新改变方向，改变的是输入输出的字符的方向。

在 Unix 系统中，一切都是文件，包括硬件。而与输入输出相关的文件描述符如下：

|!文件描述符 | !文件名 | !类型 | !硬件 |
|0|stdin|标准输入文件 |键盘|
|1|stdout|标准输出文件|显示器|
|2|stderr|标准错误输出文件|显示器|


Linux 程序在执行任何形式的 I/O 操作时，都是在读取或者写入一个文件描述符。一个文件描述符只是一个和打开的文件相关联的整数，它的背后可能是一个硬盘上的普通文件、FIFO、管道、终端、键盘、显示器，甚至是一个网络连接。

!!  shell 重定向

shell 中的重定向符号主要有四个 `>` `>>` `<` `<<`

其中：

* 向右的 `>` `>>` 是输出重定向

* 向左的 `<` `<<` 是输入重定向

* 单个的 `>` `<` 是覆盖。

* 双个 `>>` `<<` 为追加。

!!! 输出重定向

输出重定向的完整写法是 `fd>` 或者 `fd>>` 其中 fd 指的是上面的文件描述符，由于 fd 默认为 1， 也就是标准输出，所以一般都会省略。

> ''注意 `fd>` 中 `fd` 和 `>` 之间不能有空格。''

由于默认 fd 为 1，所以我们重定向的时候仅仅会重定向标准输出而不会重定向错误输出，这样就无法看到错误信息，这时候我们可以将错误输出重定向到另一个文件：

```bash
some command > out.log 2> error.log
```

或者将错误输出重定向到标准输出，这样会将错误输出和标准输出一起输出到文件。

```bash
some command > out.log 2>&1
```

> ''注意这里的顺序'': <div>

```bash
some command > out.log 2>&1
```

与 

```bash
some command 2>&1 > out.log
```
是不一样的，前者将标准输出重定向到文件 `out.log` 然后将 标准错误输出重定向到标准输出，所以最后''标准输出与标准错误输出都会输出到文件。''

后者是首先将标准错误输出重定向到标准输出，然后再将标准输出重定向到文件 `out.log`，注意后面的标准输出重定向到文件是不影响前面的标准错误输出重定向到标准输出的。所以最后的结果是''标准输出输出到文件，而标准错误输出打印在屏幕上。''

</div>
---
> 还有一种简单写法 `&>` 可以将标准输出与标准错误输出同时重定向。
---
 

最后，你可能会遇到一些你不想重定向到任何地方的输出，这时候你可以将输出重定向到 `/dev/null`, 这个文件就像是 Linux 中的黑洞一样，会吃掉所有东西：

```bash
some command > /dev/null
```

!!! 输入重定向

输出重定向可以改变输入的方向，使得输入不仅仅可以从键盘输入，还可以使用文件等等。

> 输入的完整写法也是 `fd<` 但是，fd 默认为 0，所以一般会省略。

最简单的输入重定向就是将一个文件作为标准输入：

```bash
cat < out.log
```

当想要使用重定向输入多行内容时，需要指定一个结束符，通常是 `EOF`:

```bash
cat << EOF
1
2
3
4
EOF
```
> ''注意 `EOF` 可以是任意字符'', ''且多行必须使用 `<<`''

---

和重定向相关的还有很重要的[[shell 管道]]

