caption: 十进制浮点数 decimal
created: 20200405162743079
modified: 20200406184100697
tags: [[Python Built-in]] Migrated
title: Python decimal
type: text/vnd.tiddlywiki

! decimal
---

decimal 模组为精确的十进制小数运算提供支持。相较于 `float` 类型，它有以下优点：

* Decimal 基于一个为人设计的浮点数模型，它与人们学到的十进制浮点数具有相同的特性。
* Decimal 表示的数字是完全精确的。例如 `1.1` `2.2` 这样的数在二进制中无法精确表示，所以 `1.1 + 2.2` 的结果为 `3.3000000000000003`。但是采用 Decimal 表示就能得到精确的 `3.3`。
* 虽然 Float 类型产生的误差很小，但是误差会在计算的过程中累积。所以对于一些要求严格的应用，需要 Decimal 来表示精确的小数。
* Decimal 还包含一个重要位置的概念。 `1.30 + 1.20` 的结果是 `2.50`。保留结尾的 0 以表示重要性，这在货币的计算中经常看到。
* 与基于硬件的二进制浮点数不同，Decimal 十进制浮点数可以随意修改精度。默认为 28。 <div>


```python
>>> from decimal import *
>>> getcontext().prec = 6
>>> Decimal(1) / Decimal(7)
Decimal('0.142857')
>>> getcontext().prec = 28
>>> Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
```

</div>

* 二进制和十进制浮点都是根据已发布的标准实现的。 虽然内置浮点类型只公开其功能的一小部分，但十进制模块公开了标准的所有必需部分。 在需要时，程序员可以完全控制舍入和信号处理。 这包括通过使用异常来阻止任何不精确操作来强制执行精确算术的选项。
* 十进制模块旨在支持“无偏见，精确的非连续十进制算术（有时称为定点算术）和舍入浮点算术”。 —— 摘自十进制算术规范。


!! 设置精度

精度指的是所有数字的位数，''包含小数点左边和右边''.

```python
import decimal
decimal.getcontext().prec = 18
```

> 精度默认为 28

|!Constant|!32-bit|!64-bit|
|decimal.MAX_PREC|425000000|999999999999999999|
|decimal.MAX_EMAX|425000000|999999999999999999|
|decimal.MIN_EMIN|-425000000|-999999999999999999|
|decimal.MIN_ETINY|-849999999|-1999999999999999997|

* 精度 `prec` 的取值范围：`[1, MAX_PREC]`
* 负指数 `Emin` 的取值范围：`[MIN_EMIN, 0]`
* 正指数 `Emax` 的取值范围：`[0, MAX_EMAX]`
