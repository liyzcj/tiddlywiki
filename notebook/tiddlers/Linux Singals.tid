caption: 信号处理
created: 20200710032759042
modified: 20200710042657681
tags: LinuxTaskProcessRelated Migrated
title: Linux Singals
type: text/vnd.tiddlywiki

''信号和进程控制着系统中几乎所有任务的执行。''

信号就是一条通知消息，它可以由操作系统或者一个程序发送给我们的应用。属于单向的[[异步通信机制|synchronous and asynchronous]]。一个信号可能：

* 由内核发送给进程
* 由进程发送给进程
* 由进程发送给自己

信号通常意味着一个''事件''的发生，例如一个分段错误，或者用户按下了 `Ctrl + C`.

Linux 内核一共实现大概 ''30'' 种信号。每个信号有一个唯一的数字表示，从 1 到 31。信号不会有任何参数，并且他们的名称通常能够描述这个信号的含义。例如 ''SIGKILL'' 或者数字 ''9'' 告诉程序有东西在尝试 kill 掉他，''SIGHUP'' （信号 1）代表终端挂起 （Terminal Hangup）。

信号 SIGKILL 与 SIGSTOP 总是会终止或者停止进程，进程可以控制当收到这些信号时采用什么行为，例如：

# 接受默认的行为，中断或者停止进程（根据信号的不同而不同）
# 或者程序可以选择''忽略或者去处理信号'' <div>

* ''忽略信号'' will  silently drop the signal.
* ''Handle Signals'' 会导致程序在收到信号时去运行用户定义的 signal handler 函数。
</div>


!! kill 与 kill -9

我们都知道在 Linux 中使用 [[Linux kill|kill]] 命令可以杀死一个进程，但是有时有直接 Kill 可能会杀不掉某些进程，这是因为 kill 默认发送的 signal 是 ''SIGTERM''，即信号 15，这是告诉''进程你需要被关闭，请自行停止运行并退出''；

而 `kill -9` 发送的是信号 ''9'' 即 ''SIGKILL''，这个信号就表示''进程被终止，需要立即退出；'' 因此 `kill -9` 表示强制杀死该进程，这个信号''不能被捕获也不能被忽略。''

因为无法被捕获的原因，也需要谨慎使用  `kill -9`，通常 `kill -15` 也就是默认的 Kill 会留给程序进行清理的步骤，即优雅退出。而 `kill -9` 可能造成应用程序留下了一些损坏的文件，再次启动时无法启动。