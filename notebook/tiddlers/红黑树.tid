created: 20200505132949910
modified: 20200505134728169
tags: 二叉搜索树
title: 红黑树
type: text/vnd.tiddlywiki

''红黑树''（英语：Red–black tree）是一种''自平衡二叉查找树''，是在计算机科学中用到的一种数据结构，典型的用途是实现''关联数组''。

> 它在 1972 年由鲁道夫·贝尔发明，被称为 "''对称二叉B树''"，它现代的名字源于Leo J. Guibas和Robert Sedgewick 于 1978 年写的一篇论文。

红黑树的结构复杂，但它的操作有着良好的最坏情况运行时间，并且在实践中高效：它可以在 $$O(logn)$$ 时间内完成查找、插入和删除，这里的 $$n$$ 是树中元素的数目。

!! 用途

红黑树在[[函数式编程|functional programming]]中也特别有用，在这里它们是最常用的持久数据结构（persistent data structure）之一，它们用来构造''关联数组和集合''，每次插入、删除之后它们能保持为以前的版本。除了 $$O(logn)$$ 的时间之外，红黑树的持久版本对每次插入或删除还需要 $$O(logn)$$ 的空间。

!! 优势

红黑树相对于[[AVL树]]来说，''牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作''，整体来说性能要优于[[AVL树]]。

!! 原理

红黑树是每个节点都带有颜色属性的[[二叉查找树|二叉搜索树]]，颜色为红色或黑色。除了[[二叉查找树|二叉搜索树]]的顺序要求之外，红黑树还对树有一下要求：

# 节点是红色或黑色；
# 根是黑色；
# 所有的叶子都是黑色（叶子为 `nil` 节点）；
# 每个红色节点必须有两个黑色孩子节点（从每个叶子节点到根节点的路径上不能有两个连续的红色节点）；
# 从任意节点到其子孙中的每个叶子节点的简单路径都包含有相同的黑色节点。

[img[red_black_tree]]

这些约束确保了一个红黑树的关键特性：''从根到叶子的最长的可能路径不多于最短的可能路径的两倍长''。而得到的结果是这个树是大致上平衡的（不一定平衡）。

<<info "要知道为什么这些性质确保了这个结果，注意到性质 4 导致了路径不能有两个毗连的红色节点就足够了。最短的可能路径都是黑色节点，最长的可能路径有交替的红色和黑色节点。因为根据性质 5 所有最长的路径都有相同数目的黑色节点，这就表明了没有路径能多于任何其他路径的两倍长。">>

!! 操作

对于查找这种读取操作，红黑树和一个普通的[[二叉搜索树]]是相同的。但是在进行''插入和删除''操作的时候，会导致颜色不再符合上面的约束，这时候就需要''改变颜色''。

恢复红黑树的性质需要少量 $$O(logn)$$ 的颜色变更（实际是非常快速的）和不超过三次树旋转（对于插入操作是两次）。虽然插入和删除很复杂，但操作时间仍可以保持为 $$O(logn)$$ 次。