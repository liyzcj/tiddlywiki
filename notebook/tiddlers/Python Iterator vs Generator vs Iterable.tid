caption: 迭代器与生成器 Iterator vs Generator
created: 20200315025558590
modified: 20200404125642061
tags: [[Python 高级应用]]
title: Python Iterator vs Generator vs Iterable
type: text/vnd.tiddlywiki

关于迭代 Iteration，在 Python 中有三个重要的概念：''Iterable''，''Iterator'' 和 ''Generator''。对于初学者，这三个概念经常被混淆。

!! Iterable

首先 Iterable 是一个对象，只要一个对象满足以下两个要求''之一''，就称之为 Iterable：

* 拥有 `__iter__()` 方法，并且该方法返回一个 ''Iterator''。
* 拥有 `__getitem__()` 方法，该方法可以根据给定的从 0 开始的序列返回结果，并且在索引范围外抛出一个 `IndexError` 。例如一个 List。

> `[]` 仅仅是一个语法糖，当你在代码中写 `obj[i]` 时，这会调用 obj 的 `__getitem__()` 方法。

一个 Iterable 对象本身应该包含所有被遍历出的元素。

!! Iterator

Iterator 也是一个对象。这个对象需要''同时''满足以下两个条件：


* 拥有 `__next__()` 方法，当迭代结束时抛出 `StopIteration` 异常。
* 拥有 `__iter__()` 方法，返回 `self`。

当你使用 `next(obj)` 时，会调用对象的 `__next__()` 方法。

> 当你使用 `for` 循环，`map` 等语法时，Python 在内部自动调用 `next()` 方法。用来遍历一个 Iterator。

一个 Iterator 就像一个书签，它意义在于保存了当前''遍历的位置。'' 

''一个迭代器对象只能前进不能后退，并且只能迭代一次。''

!! Generator

Generator 生成器是一个简易版的 Iterator，是 Python 内置的迭代器。

要编写一个 Generator 非常简单，只需要定一个函数，并且在函数内''使用一个或多个 `yield` 语句''即可。这个函数通常没有 `return` 语句，但是在你调用函数时，会返回一个名字叫做 generator 的迭代器。

这个叫 Generator 的迭代器也是一样的，它就像一个书签，会记录你当前遍历到哪个位置（也就是执行到了第几个 yield 语句）。yield 语句对应的值就相当于 `__next__()` 方法的返回值。

> 在 Python 3.3 添加了一个新的语法，让迭代器更加方便：<div>

```python
yield from Iterable
```

可以快速使用生成器迭代一个 Iterable, 相较于之前的：

```python
for i in [1, 2, 3]:
	yield i
```

现在可以：

```python
yield from [1, 2, 3]
```

</div>

!! Cheat Sheet

```python
 sequence
  +
  |
  v
   def __getitem__(self, index: int):
  +    ...
  |    raise IndexError
  |
  |
  |              def __iter__(self):
  |             +     ...
  |             |     return <iterator>
  |             |
  |             |
  +--> or <-----+        def __next__(self):
       +        |       +    ...
       |        |       |    raise StopIteration
       v        |       |
    iterable    |       |
           +    |       |
           |    |       v
           |    +----> and +-------> iterator
           |                               ^
           v                               |
   iter(<iterable>) +----------------------+
                                           |
   def generator():                        |
  +    yield 1                             |
  |                 generator_expression +-+
  |                                        |
  +-> generator() +-> generator_iterator +-+
```


!! Iterator vs Generator

既然 Generator 就是一个 Iterator，那么为什么我们不直接去实现 Iterator呢？因为 Generator 更方便呀😓。

相比较于 Iterator， Generator 方便实现，并且能满足绝大部分的需求。

而 Iterator 虽然实现麻烦一点，但是确实可以更加灵活, 例如除了实现 `__next__()` 方法以外，你还可以实现一些其他的有用的方法，例如 `current()` 方法获取当前位置。

---

!! Reference

* [[Difference between Python's Generators and Iterators|https://stackoverflow.com/a/2776865/12572033]]
* [[What exactly are iterator, iterable, and iteration?|https://stackoverflow.com/a/9884259/12572033]]