caption: 封装
created: 20190720173514464
creator: liyzcj
modified: 20200411041800592
modifier: liyzcj
tags: Concept Migrated
title: Python封装
type: text/vnd.tiddlywiki

将属性或方法封装在类或着实例中, 通过类或着实例访问.

[img width=480 [https://s2.ax1x.com/2019/07/21/eSsgcd.png]]

!! 属性 Attribute

* 普通属性 <div>

''属于实例''; 只能由实例访问. 定义时使用 `self` 在类方法内定义.

```python
class Foo:
  def __init__(self)
    self.name = 'Foo'
```

</div>

* 静态属性 <div>

''属于类''; 静态Attr 可以由类访问, 也可以由实例访问, 在方法外定义.

```python
class Foo:
  name = 'Foo'
```

> 普通属性每个实例都有一份. 静态属性只在类中保存一份.

</div>

!! 方法

* 普通方法 <div>

只能通过实例调用, 至少有一个 `self` 参数. 调用普通方法时, 自动将调用该方法的实例赋值给 `self` 参数.

```python
def func(self, paramlist):
  pass
```

</div>

* 类方法 <div>

可以通过类或实例调用, 至少有一个 `cls` 参数, 调用类方法时, 自动将调用该方法的类赋值给 `cls` 参数.

```python
@classmethod
def func(cls, paramlist):
  pass
```

</div>

* 静态方法 <div>

通过类或实例调用, 无必须参数.

```python
@staticmethod
def funcname(parameter_list):
  pass
```

> 💡 所有的方法都只在内存中保存一份, 只不过根据调用的实例不同, 传入的参数不同.

</div>

!! 方法属性

方法属性是将方法定义为属性, 当作属性使用. 在定义时通过 ''方法'' 定义, 调用时像 ''属性'' 一样调用.

定义方法属性有两种方法:

# 通过装饰器 `@property` <div>


通过装饰器, 经典类中有一个装饰器:

```python
@property
def prop(self):
  return self.__prop
```

调用时, 自动执行对应方法, 并返回值:

```python
res = obj.prop
```

新式类中增加了两个装饰器, 分别在对属性赋值和删除时:

```python
@prop.setter
def prop(self, v):
  pass

@prop.deleter
def prop(self):
  pass
```

> 💡 赋值时会将值传递给 `@prop.setter` 修饰的方法的参数.

</div>

# 通过静态属性定义 property 实例. <div>

通过静态属性初始化 property 实例, 例如:

```python
class C(object):
    def __init__(self):
        self._x = None
 
    def getx(self):
        return self._x
 
    def setx(self, value):
        self._x = value
 
    def delx(self):
        del self._x
 
    x = property(getx, setx, delx, "I'm the 'x' property.")
```

构造 property 实例需要四个参数:

```python
class property([fget[, fset[, fdel[, doc]]]])
```

* fget -- 获取属性值, 调用时触发, 对应 `@property`
* fset -- 设置属性值, 赋值时触发, 对应 `@prop.setter`
* fdel -- 删除属性值, 删除时触发, 对应 `@prop.deleter`
* doc  -- 文档描述. 对应 `obj.prop.__doc__`

</div>

!! 访问控制

;普通属性
: 可以在外部随意访问或修改

;保护属性
: 由 `_` 开头的属性 `_attr`; ''保护类型'', 约定俗称最好不要从外部访问, 实例内部与子类可以访问.

> 💡 保护属性无法通过 `from some import *` 导入.

;私有属性
: 两个 `_` 开头的属性 `__attr`; ''私有类型'', 只有实例内部可以访问. 在外部可以通过 `obj._cls__attr` 强制访问.

可以通过设置方法属性来给私有属性提供外部提供访问的接口.


;特殊属性

特殊属性 `__attr__` 可以从外部访问, 是Python 内置的属性, 有一些特殊用途.

	> 详细见: [[Python 特殊属性方法]]