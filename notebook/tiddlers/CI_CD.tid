created: 20190901151112891
modified: 20200404203414892
tags: [[Develop Concept]] Migrated
title: CI/CD
type: text/vnd.tiddlywiki

~~~~CI/CD 是一种在开发阶段向客户频繁交付应用的方法。 

核心概念：持续集成、持续交付、持续部署。

具体而言，CI/CD 在整个应用生命周期内（从集成测试，到交付部署）引入了持续自动化和持续监控。这些关联的事物通常被统称为 “CI/CD” 管道。由开发和运维团队以敏捷方式协同支持。

!! CI

CI （Continuous Integration） 是指持续集成，它属于开发人员的自动化流程。每次集成都通过自动化的编译，测试与发布来验证，从而尽快的发现集成错误。成功的 CI 意味着代码的更改会定期的构建、测试并合并到代码库中，可以快速的解决由于开发的分支过多而导致的相互冲突问题。

CI 需要具备的条件：

* 团队需要为每个新功能、代码改进或着DEBUG创建自动化测试用例。
* 需要一个 CI 服务器，监控代码提交情况，对新的提交进行自动化测试。
* 研发团队需要尽可能快的提交代码（至少每天一次）。

带来的效益：

* 通过自动化测试可以提前拿到回归测试结果，避免将一些问题提交到交付生产中。
* 发布编译时将会更加容易，因为合并之前已经将所有问题都规避了。
* 减少工作问题切换时间，研发可以快速获取构建失败的消息，并快速解决。
* 测试成本大幅度降低。

!! CD

CD（Continuous Deployment）是指持续部署，通过自动化的构建、测试和部署，将开发人员的更改自动发布到生产环境，以供客户使用。任何修改只要通过了已有的工作流就会与客户直接见面，只有工作流中出现失败才会阻止这个更改应用到生产环境。

CD 需要具备的条件：

* 研发人员测试理念比较完善，测试的鲁棒性直接决定交付质量。
* 文档的更新频率需要和部署频率保持一致。


带来的效益：

* 发布频率快，因为不需要停下来等待发布。
* 小批量发布的风险降低了。每一处提交都会自动触发发布流。
* 客户每天都可以看到产品的持续改进与提升，而不是每季度、每年。

---

CD 还有另外一个概念：（Continuous Delivery）持续交付。是一种软件工程手法，它可以让软件产品的产出过程在一个短的周期内完成，以保证软件可以稳定持续的保持在随时可以释出的状况。减少软件开发成本，减少风险。

> Continuous Delivery 与 Continuous Deployment 经常混淆。持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付则意味着所有的变更可以部署到生产环境，但是处于业务考虑，可以选择不进行部署。如果要实施持续部署，则必须先实现持续交付。


持续交付需要具备的条件：

* 强大的持续集成组件以及足够多的测试项可以满足代码需求。
* 部署需要自动化，触发则是手动的，但是部署一旦开始就不应该有人为干预。
* 团队可能需要特性开关，没有完成的功能模块不能影响到线上的产品。

带来的效益：

* 没有了繁琐的部署工作。
* 可以更快的进行交付，加快了与客户之间的反馈环。
* 轻松的应对小的变更，加速迭代。
