created: 20200505125122596
modified: 20200505131637892
tags: 二叉树
title: 二叉搜索树
type: text/vnd.tiddlywiki

''二叉查找树''（英语：Binary Search Tree），也称为''二叉搜索树''、''有序二叉树''（ordered binary tree）或''排序二叉树''（sorted binary tree），是指一棵空树或者具有下列性质的二叉树：

* 若任意节点的左子树不空，则''左子树上所有节点的值均小于它的根节点的值''；
* 若任意节点的右子树不空，则''右子树上所有节点的值均大于或等于它的根节点的值''；
* 任意节点的左、右子树也分别为二叉查找树；



二叉查找树是基础性数据结构，用于构建更为抽象的数据结构，如''集合、多重集、关联数组''等。


二叉查找树相比于其他数据结构的优势在于''查找、插入的时间复杂度较低''，为 $$O(logn)$$。


二叉查找树通常采取[[二叉链表|链表]]作为二叉查找树的存储结构。''中序遍历''二叉查找树可以得到一个有序的序列。一个无序的序列可以通过构建一个二叉查找树来进行排序，构建树的过程是对无序序列进行查找的过程。每次插入的新节点都是二叉搜索树上的叶子节点。在插入时，不需要改变其他节点的存储位置，只需要修改节点的指针。

二叉查找树搜索、插入、删除的复杂度等于树高，期望为 $$O(logn)$$ 最坏为 $$O(n)$$（退化为[[线性表]])。

!! 平衡二叉树

虽然二叉查找树的最坏效果是 $$O(n)$$ 但是它支持''动态查询''，并且有许多改进版的二叉查找树可以将二叉树优化为''平衡二叉树''， 树高 $$O(logn)$$ ，从而将最坏的效率降低到 $$O(logn)$$. 例如：

<<list-links "[tag{!!title}sort[title]]">>
