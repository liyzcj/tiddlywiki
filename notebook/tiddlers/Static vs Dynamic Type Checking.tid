caption: 静态类型与动态类型
created: 20200322022009784
modified: 20200404184733407
tags: ProgrammingConcepts
title: Static vs Dynamic Type Checking
type: text/vnd.tiddlywiki

! 静态类型与动态类型
---

人们常说的静态类型与动态类型描述的是''一个编程语言的类型检查的方式。''他们分别代表两个不同的''类型检查系统''。一个类型检查系统表示的是一系列规则，这些规则将一个叫 `type` 的属性分配给计算机程序中的各种结构，例如变量、表达式、函数、模组等。

类型检查系统的最终目的是通过验证整个程序中的数据是否正确表示，来减少程序中错误的数量。

!! A Type

Type 也称为 Data Type，是对于数据的一种分类。简单来说就是 Type 决定了数据的值域、数据的含义，以及数据是怎么在内存中存储的。

类型可以分为以下几种：

* ''Primitive Types''：Primitive Type 与编程语言的设计有关。通常都会有 `int`、 `float`、 `boolean`、 `chars` 等等。
* ''Composite Types''：复合类型由一种或多种 Primitive Types 组成，例如一个数组，''所有复合类型都可以称作数据结构。''
* ''Abstract Types''：抽象类型指的是那些没有具体实现的类型。例如哈希表、集合、队列、堆、栈等，这些数据类型都可以采用不同的方式实现。
* ''Other Types''：例如指针、函数等。


不同编程语言的类型不同，但是他们的概念都是一样的，类型都定义了一组数据的属性和行为。


!! 类型检查

如果不对一个数据的类型进行验证以确定程序的行为，那么数据的类型就没有意义了。这就是为什么要做类型检查。

类型检查是验证和对类型行为进行约束的过程，它可以发生在编译阶段（静态类型），也可以发生在运行时阶段（动态类型）。

类型检查是为了确保程序是类型安全的，目的是为了将''类型错误''的可能性降低到最低。''类型错误''指的是对一个数据类型进行这种类型不支持的操作。例如：

```python
x = 1 + "2"
```

将字符串与数字相加是不允许的操作。

<<info "当一个程序遇到类型错误时没有一种标准的行为，这个程序就被认为不是类型安全的。">>


!! Static Type Checking

如果一个编程语言的类型检查过程发生在''编译时''，这个语言就是静态类型语言。例如 Ada, C, C++, C#, JADE, Java, Fortran, Haskell, ML, Pascal, and Scala.

''静态类型最大的好处是，它能够在程序开发早期捕获很多类型错误。'' 静态类型的语言通常会有很高的性能，因为编译器在编译时可以知道数据的类型，所以就可以对产生的机器码进行优化。

静态类型检查器能够快速监测到代码中的类型错误。如果没有静态类型检查，即使你的 test coverage 达到 100% 也可能无法找到所有的类型错误。

静态类型的一个缺点是你几乎没有办法在代码中抛出一个类型错误，即使是一段很难被用到的代码，类型检查器也一定会找到一个可能产生类型错误的实例来阻止你程序的运行。


!!! 动态类型检查

如果一个编程语言的类型检查过程发生在''运行时''，这个语言就是动态类型语言。例如 Groovy, ~JavaScript, Lisp, Lua, Objective-C, PHP, Prolog, Python, Ruby, Smalltalk and Tcl.

大多数类型安全的语言都包含某种动态类型检查的机制，即使他们同样也具有静态类型检查。之所以这样是因为很多有用的功能特性采用静态检查的方式无法实现。例如 downcasting、dynamic dispatch、late binding、[[Reflection]] 等等。

与静态语言相反，动态类型可能会导致程序在运行时出现类型错误。某些语言可以通过异常处理来处理这种错误。否则，类型错误可以认为是致命的。

<<info "由于类型错误很难通过动态检查器检查到，所以经常通过单元测试作为补充。">>

动态语言还有一个缺点是性能不好。因为不知道数据的类型，所以无法对数据进行优化。

但是动态类型打开了编程语言新世界的大门，赋予了一个编程语言许多强大的功能。例如[[MetaProgramming]]等等

!! 误解

!!! Static/Dynamic Type 不等于 Strong/Weak Type

一个常见的误解认为''静态类型就是强类型，动态类型就是弱类型。''这是不对的：

{{Strong vs Weak Type}}

无论是动态、静态，还是强、弱类型，都是针对类型安全的话题。你可以认为''动态、静态规定了合适检查类型。强、弱规定如何检查类型。''

!!! Static/Dynamic Type 不等于 Compiled/Interpreted 语言

大多数静态类型语言确实是编译型语言，大多数动态语言也是执行时进行解释的解释型语言。但是并不是总是这样。

当我们是或静态、动态的时候，我们考虑的是整个语言。例如无论那种版本的 Java，它一定是静态类型检查的。这与一个语言是编译型还是解释型不同，因为''编译型还是解释型取决于某个特定版本的实现。''

''理论上任何语言都可以有编译型或解释型的实现。''

例如 Java 最常用的版本是编译为二进制代码，JVM 解释器再对二进制代码进行解释。

但是也有一些 Java 版本是直接编译为机器码。

---

!! Reference

* [[Programming Concepts: Static vs. Dynamic Type Checking|https://thecodeboss.dev/2015/11/programming-concepts-static-vs-dynamic-type-checking/]]