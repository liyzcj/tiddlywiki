created: 20190804195142420
creator: liyzcj
modified: 20200211092700132
modifier: liyzcj
tags: Git
title: Git常用命令
type: text/vnd.tiddlywiki

! 常用命令
---

!! 推送到远程仓库

强制推送, 可以用来删除远程仓库的某些节点:

```bash
git push --force
```

!! reset

放弃已暂存的修改(物理): 

```bash
git reset --hard <HEAD>
```

放弃已暂存的修改(逻辑):

```bash
git reset <HEAD>
```

---

!! 暂存

暂存可以将修改暂时保存到本地的一个 stack 中。

* `git stash`暂存（存储在本地，并将项目本次操作还原）
* `git stash pop` 使用上一次暂存，并将这个暂存删除，使用该命令后，如果有冲突，终端会显示，如果有冲突需要先解决冲突（这就避免了冲突提交服务器，将冲突留在本地，然后解决）
* `git stash list` 查看所有的暂存
* `git stash clear` 清空所有的暂存
* `git stash drop [-q|--quiet] []` 删除某一个暂存，在中括号里面放置需要删除的暂存ID
* `git stash apply` 使用某个暂存，但是不会删除这个暂存

---

!! 分支

''合并分支：''

```bash
git checkout 要合并到的分支
git merge 待合并的分支
```

> ''注意 merge 命令是 merge 其他分支到当前分支。''

删除 已经 merge 到 master 的分支：

```bash
git branch --merged master | grep -v '^\*\|  master' | xargs -n 1 git branch -d
```

查看所有分支（包括远程分支）：

```bash
git branch -a
```

查看本地分支：

```bash
git branch
```

拉取远程分支：

```bash
git pull origin remote_name:local_name
```

> 如果要与本地当前分支 merge，则可以省略 `local_name`。

创建分支：

```bash
git branch branch_name # 方法一，创建后不会自动切换
git checkout -b branch_name # 方法二，创建后会自动切换到分支
```

删除本地分支：

```bash
git branch -d branch_name
```

> 如果没有 merge 的分支，需要使用 -D 参数。

删除远程分支：

```bash
git branch -r -d origin/branch_name # 删除本地远程分支
git push origin :branch_name # 删除远程分支
```