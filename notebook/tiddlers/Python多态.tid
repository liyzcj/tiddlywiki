caption: 多态
created: 20190720174439713
creator: liyzcj
modified: 20190828185123241
modifier: liyzcj
tags: Concept Migrated
title: Python多态
type: text/vnd.tiddlywiki

多态是在继承的基础上保证子类的多样性, 使得子类可以覆盖父类的方法. 多态分为''强类型'' 与 ''弱类型''.

!! 强类型

在强类型语言中, 如 JAVA C++ C# 等, 通过子类实现 ''覆盖'' 父类已有的方法; 调用时, 通过父类 对象可以实现一个通用方法, 当参数是不同的子类时实现不同的功能.

所以, 强类型语言是通过继承与覆盖来实现多态的. 也可以不使用覆盖, 例如在各个子类中定义父类没有的相同方法.

强类型语言多态实例: [[C++ 多态]]

!! 弱类型

Python 是弱类型语言, 也叫做 "鸭子类型". 它并不要求严格的继承体系, 一个对象只要 "看起来像鸭子,走起路来像鸭子" 那它就可以被看做是鸭子.

Python的 "file-like object" 就是一种鸭子类型. 对真正的文件对象, 它有一个 read() 方法, 返回其内容. 但是, 许多对象, 只要有read()方法, 都被视为 "file-like object". 许多函数接收的参数就是 "file-like object", 你不一定要传入真正的文件对象, 完全可以传入任何实现了 read() 方法的对象.

> Python这种弱类型动态语言, 定义方法时不需要指定参数类型, 即使不通过父类也可以实现应用于多种类的方法. 即不通过继承, 也可以实现多态.