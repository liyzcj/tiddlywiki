created: 20191129034404451
modified: 20191213074813221
tags: Python
title: Python Module
type: text/vnd.tiddlywiki

!! Python module search path:

> https://docs.python.org/3/tutorial/modules.html#the-module-search-path

#. Build-in module

#. Find from `sys.path`. <div>

> `sys.path` generated by follows:
>* Directory containing input script, or current directory when start console.
>* PYTHONPATH (a list of directory names, with the same syntax as the shell variable PATH).
>* The installation-dependent default.

</div>

#. `sys.path` can be modified after initialization.


!! dir()

> https://docs.python.org/3/tutorial/modules.html#the-dir-function

`dir()` can list all variables a module defines. and return a list of strings:

```python
>>> import sys
>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__loader__', '__name__',
 '__package__', '__stderr__', '__stdin__', '__stdout__',
 '_clear_type_cache', '_current_frames', '_debugmallocstats', '_getframe',
 '_home', '_mercurial', '_xoptions', 'abiflags', 'api_version', 'argv',
 'base_exec_prefix', 'base_prefix', 'builtin_module_names', 'byteorder',
 'call_tracing', 'callstats', 'copyright', 'displayhook',
 'dont_write_bytecode', 'exc_info', 'excepthook', 'exec_prefix',
 'executable', 'exit', 'flags', 'float_info', 'float_repr_style',
 'getcheckinterval', 'getdefaultencoding', 'getdlopenflags',
 'getfilesystemencoding', 'getobjects', 'getprofile', 'getrecursionlimit',
 'getrefcount', 'getsizeof', 'getswitchinterval', 'gettotalrefcount',
 'gettrace', 'hash_info', 'hexversion', 'implementation', 'int_info',
 'intern', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path',
 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1',
 'setcheckinterval', 'setdlopenflags', 'setprofile', 'setrecursionlimit',
 'setswitchinterval', 'settrace', 'stderr', 'stdin', 'stdout',
 'thread_info', 'version', 'version_info', 'warnoptions']
```

With out arguments `dir()` lists all variables currently.

> By default `dir()` does not list built-in function and variables. if you want list built-in functions and variables use: <div>

```python
>>> import builtins
>>> dir(builtins)
```
</div>
 
> 与 `dir()` 类似的还有 ：<div>

* `globals()` : 返回当前可用的全局变量的字典，包含变量的名字与value。
* `locals()` : 返回当前可用的局部变量的字典，包含变量的名字与value。

</div>

 
!! import 机制

> https://docs.python.org/zh-cn/3/reference/import.html

!!! import modules

# 执行某条 import 语句
# 在 sys.modules 中查找将要 import 的 module <div>

sys.modules 是一个当前内存中所有的 module 的 dictionary，其中 key 是 module 名称，value是内存中对应 module。

> 注意 `sys.modules` 中的 key 是module 的原名称。 即使 `import numpy as np`，`sys.modules` 中的 key 也是 `numpy`， `np` 只作为别名存在与当前的 local 环境中。

</div>

# 如果 module 存在，返回 module 对象。
# 如果 module 不存在，创建一个新的 module对象
# 执行module 内的代码，填充module 对象的 `__dict__` 变量。

!!! import 包

import 包与 import module 是一样的步骤，只不过在填充 `__dict__` 的那一步是执行包内的 `__init__.py` 文件，而不是整个包的代码了。

!!! 循环嵌套错误

```python
#foo.py
from bar import Bar
class Foo: pass
```

```python
#bar.py
from foo import Foo
class Bar: pass
```

这时候执行 `python foo.py` 会抛出异常： `ImportError: cannot import name Bar`

步骤：

# `from bar import Bar` 从 `sys.modules` 查找 `bar` 发现没有，创建新的 module 对象
# 执行 bar.py 填充 module bar 对象的 `__dict__`
# 执行到 bar.py 的 `from foo import Foo` ，查找 `foo` 发现没有， 创建新的 module 对象。
# 执行 foo.py  填充 module foo 对象的 `__dict__`.
# 执行到 `from bar import Bar`， 从 `sys.modules` 查找 `bar`, 找到了，但是注意这时候 module bar 的 __dict__ 还是空的。所以报错找不到 `Bar`

