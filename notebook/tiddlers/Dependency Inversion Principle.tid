caption: 依赖反转原则 DIP
created: 20200411092539680
modified: 20200423053558558
tags: [[SOLID 原则]] Migrated
title: Dependency Inversion Principle
type: text/vnd.tiddlywiki

! 依赖反转原则
---

在面向对象编程领域中，依赖反转原则（Dependency inversion principle，''DIP''）是指一种特定的''[[解耦|Coupling]]形式'', ''使得高层次的模块不依赖于低层次的模块的实现细节，依赖关系被颠倒（反转），从而使得低层次模块依赖于高层次模块的需求抽象''。

> 传统的依赖关系创建在高层次上，而具体的策略设置则应用在低层次的模块上

该原则规定：

* 高层次的模块不应该依赖于低层次的模块，两者都应该依赖于''抽象接口''。
* 抽象接口不应该依赖于具体实现。而具体实现则应该依赖于抽象接口。


''面向接口''实现方法是 DIP 的表现方式。在 DIP 中，''上层代码不再依赖于下层，而是依赖于一个抽象接口，而下层的代码同样依赖抽象接口。'' 

抽象接口往往是 `-able` 的表现方式。当一个对象应该是 `-able` 而不是 `is-a` 的时候，使用抽象接口实现会增加对象与方法的灵活性。并接口高层与底层之间的依赖。


<<info "Python 中的 magic method 就是一种抽象接口的体现，例如 `__iter__()` 方法代表一个 Object 是 ''Iterable'' 的，`__hash__()` 代表一个 Object 是 ''Hashable'' 的，等等。">>